#generated by running
#diff <original file> sos_resolution.py > resolution.diff

66c66
<    def __init__ (self,state,parent=[],depth=0,gval=0,hval=None):
---
>    def __init__ (self,state, sos, parent=[],depth=0,gval=0,hval=None):
68a69
>       self.sos = sos;
76,79c77,80
< def makeNodes (n, succStates):
<    return [Node(s,parent=n,depth=1+n.depth,\
<             gval=n.gval+edgecost(n.state,s))\
<             for s in succStates]
---
> def makeNodes (n, succStates, succSos):
>    return [Node(succStates[i], succSos[i],parent=n,depth=1+n.depth,\
>             gval=n.gval+edgecost(n.state,succStates[i]))\
>             for i in range(0, len(succStates))]
153,156c154,164
<    parent1 = node.state[0]
<    for parent2 in node.state[1:]:
<      for lit1 in parent1.cl:
<         for lit2 in parent2.cl:
---
>    sos = [];
>    #see if any clause in the current states sos can cancel out any other 
>    #clauses in the current KB
>    for sos_clause in node.sos:
> 
>      #target is the clause in the KB being compared to sos_clause
>      for target in node.state:
> 
>        #compare literals
>        for lit1 in target.cl:
>          for lit2 in sos_clause.cl:
158,163c166,174
<               uresult = unify(lit1.sentence,lit2.sentence)
<               if not uresult == 'fail':
<                  newsucc = [resolvent(parent1,parent2,lit1,lit2,uresult)] +\
<                    node.state
<                  succs = succs + [newsucc]
<    return succs
---
>              uresult = unify(lit1.sentence,lit2.sentence)
>              if not uresult == 'fail':
>                #resolve
>                #create a new successor state and an updated sos for it
>                new_clause = resolvent(sos_clause, target, lit1, lit2, uresult);
>                new_sos = [new_clause] + node.sos;
>                newsucc = [new_clause] + node.state;
>                sos += [new_sos];
>                succs += [newsucc]
164a176,177
>    #return a tuple of successor states paired with that states set of support
>    return (succs, sos)
180c193
<    stack = [Node(start)]
---
>    stack = [Node(start, [start[-1]])] #second argument is set of support clauses
186c199
<       stack = makeNodes(cur,successors(cur)) + stack
---
>       stack = makeNodes(cur,*successors(cur)) + stack
